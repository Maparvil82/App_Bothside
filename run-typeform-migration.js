const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Error: Faltan las variables de entorno de Supabase');
  console.log('Aseg√∫rate de tener SUPABASE_URL y SUPABASE_ANON_KEY en tu archivo .env');
  console.log('O EXPO_PUBLIC_SUPABASE_URL y EXPO_PUBLIC_SUPABASE_ANON_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function runTypeFormMigration() {
  console.log('üöÄ Ejecutando migraci√≥n para TypeForm...\n');

  try {
    // Crear la tabla album_typeform_responses
    console.log('üìã Creando tabla album_typeform_responses...');
    
    const { error: createTableError } = await supabase.rpc('exec_sql', {
      sql: `
        -- Crear tabla para almacenar las respuestas del TypeForm de los √°lbumes
        CREATE TABLE IF NOT EXISTS public.album_typeform_responses (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
          user_collection_id UUID REFERENCES public.user_collection(id) ON DELETE CASCADE NOT NULL,
          question_1 TEXT, -- ¬øCu√°l es tu canci√≥n favorita de este √°lbum?
          question_2 TEXT, -- ¬øEn qu√© momento de tu vida descubriste este disco?
          question_3 TEXT, -- ¬øQu√© recuerdos te trae este √°lbum?
          question_4 TEXT, -- ¬øRecomendar√≠as este disco a un amigo? ¬øPor qu√©?
          question_5 TEXT, -- ¬øC√≥mo te hace sentir este √°lbum?
          created_at TIMESTAMPTZ DEFAULT NOW(),
          updated_at TIMESTAMPTZ DEFAULT NOW(),
          
          -- Asegurar que un usuario solo puede tener una respuesta por √°lbum
          UNIQUE(user_id, user_collection_id)
        );
      `
    });

    if (createTableError) {
      console.error('‚ùå Error creando tabla:', createTableError);
      return;
    }

    console.log('‚úÖ Tabla album_typeform_responses creada');

    // Habilitar RLS
    console.log('üîí Habilitando RLS...');
    const { error: rlsError } = await supabase.rpc('exec_sql', {
      sql: 'ALTER TABLE public.album_typeform_responses ENABLE ROW LEVEL SECURITY;'
    });

    if (rlsError) {
      console.error('‚ùå Error habilitando RLS:', rlsError);
      return;
    }

    console.log('‚úÖ RLS habilitado');

    // Crear pol√≠ticas RLS
    console.log('üìú Creando pol√≠ticas RLS...');
    
    const policies = [
      `CREATE POLICY "Users can view their own typeform responses"
        ON public.album_typeform_responses FOR SELECT
        USING (auth.uid() = user_id);`,
      
      `CREATE POLICY "Users can insert their own typeform responses"
        ON public.album_typeform_responses FOR INSERT
        WITH CHECK (auth.uid() = user_id);`,
      
      `CREATE POLICY "Users can update their own typeform responses"
        ON public.album_typeform_responses FOR UPDATE
        USING (auth.uid() = user_id)
        WITH CHECK (auth.uid() = user_id);`,
      
      `CREATE POLICY "Users can delete their own typeform responses"
        ON public.album_typeform_responses FOR DELETE
        USING (auth.uid() = user_id);`
    ];

    for (const policy of policies) {
      const { error: policyError } = await supabase.rpc('exec_sql', { sql: policy });
      if (policyError) {
        console.error('‚ùå Error creando pol√≠tica:', policyError);
        return;
      }
    }

    console.log('‚úÖ Pol√≠ticas RLS creadas');

    // Crear trigger para updated_at
    console.log('‚ö° Creando trigger para updated_at...');
    
    const triggerSQL = `
      -- Trigger para actualizar updated_at autom√°ticamente
      CREATE OR REPLACE FUNCTION update_updated_at_column()
      RETURNS TRIGGER AS $$
      BEGIN
        NEW.updated_at = NOW();
        RETURN NEW;
      END;
      $$ LANGUAGE plpgsql;

      CREATE TRIGGER update_album_typeform_responses_updated_at
        BEFORE UPDATE ON public.album_typeform_responses
        FOR EACH ROW
        EXECUTE FUNCTION update_updated_at_column();
    `;

    const { error: triggerError } = await supabase.rpc('exec_sql', { sql: triggerSQL });
    if (triggerError) {
      console.error('‚ùå Error creando trigger:', triggerError);
      return;
    }

    console.log('‚úÖ Trigger creado');

    // Agregar comentarios
    console.log('üí¨ Agregando comentarios...');
    
    const commentsSQL = `
      COMMENT ON TABLE public.album_typeform_responses IS 'Almacena las respuestas del TypeForm para cada √°lbum de la colecci√≥n del usuario';
      COMMENT ON COLUMN public.album_typeform_responses.question_1 IS '¬øCu√°l es tu canci√≥n favorita de este √°lbum?';
      COMMENT ON COLUMN public.album_typeform_responses.question_2 IS '¬øEn qu√© momento de tu vida descubriste este disco?';
      COMMENT ON COLUMN public.album_typeform_responses.question_3 IS '¬øQu√© recuerdos te trae este √°lbum?';
      COMMENT ON COLUMN public.album_typeform_responses.question_4 IS '¬øRecomendar√≠as este disco a un amigo? ¬øPor qu√©?';
      COMMENT ON COLUMN public.album_typeform_responses.question_5 IS '¬øC√≥mo te hace sentir este √°lbum?';
    `;

    const { error: commentsError } = await supabase.rpc('exec_sql', { sql: commentsSQL });
    if (commentsError) {
      console.error('‚ùå Error agregando comentarios:', commentsError);
      return;
    }

    console.log('‚úÖ Comentarios agregados');

    console.log('\nüéâ ¬°Migraci√≥n completada exitosamente!');
    console.log('üìã La tabla album_typeform_responses est√° lista para usar');
    console.log('üîí Las pol√≠ticas RLS est√°n configuradas correctamente');
    console.log('‚ö° El trigger para updated_at est√° funcionando');

  } catch (error) {
    console.error('‚ùå Error general durante la migraci√≥n:', error);
  }
}

runTypeFormMigration(); 